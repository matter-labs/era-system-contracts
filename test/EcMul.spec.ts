import { expect } from 'chai';
import { Contract } from 'zksync-web3';
import { deployContractYul, callFallback } from './shared/utils';

describe('EcMul tests', function () {
    let ecMul: Contract;

    before(async () => {
        ecMul = await deployContractYul('EcMul', 'precompiles');
    });

    describe('Ethereum tests', function () {
        it('128 bytes: (1, 3) * 0', async () => {
            const call = callFallback(ecMul, "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
            await expect(call).to.be.reverted;
        });

        it('128 bytes: (1, 2) * 21888242871839275222246405745257275088548364400416034343698204186575808495616', async () => {
            const returnData = await callFallback(ecMul, "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000230644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000000000000000000000000000000000000000000000000000000000000000000000");
            await expect(returnData).to.be.equal("0x000000000000000000000000000000000000000000000000000000000000000130644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd45");
        });

        it('64 bytes: (1, 3) * 0', async () => {
            const call = callFallback(ecMul, "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003");
            await expect(call).to.be.reverted;
        });

        it('128 bytes: (1, 3) * 21888242871839275222246405745257275088548364400416034343698204186575808495616', async () => {
            const call = callFallback(ecMul, "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000330644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000000000000000000000000000000000000000000000000000000000000000000000");
            await expect(call).to.be.reverted;
        });

        it('96 bytes: (1, 3) * 21888242871839275222246405745257275088548364400416034343698204186575808495617', async () => {
            const call = callFallback(ecMul, "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000330644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001");
            await expect(call).to.be.reverted;
        });

        it('96 bytes: (1, 3) * 1', async () => {
            const call = callFallback(ecMul, "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001");
            await expect(call).to.be.reverted;
        });

        // (11999875504842010600789954262886096740416429265635183817701593963271973497827, 11843594000332171325303933275547366297934113019079887694534126289021216356598)
        // *
        // 21888242871839275222246405745257275088548364400416034343698204186575808495616
        it('96 bytes: (1199..7827, 1184..6598) * 2188..5616', async () => {
            const returnData = await callFallback(ecMul, "0x1a87b0584ce92f4593d161480614f2989035225609f08058ccfa3d0f940febe31a2f3c951f6dadcc7ee9007dff81504b0fcd6d7cf59996efdc33d92bf7f9f8f630644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000");
            await expect(returnData).to.be.equal("0x1a87b0584ce92f4593d161480614f2989035225609f08058ccfa3d0f940febe3163511ddc1c3f25d396745388200081287b3fd1472d8339d5fecb2eae0830451");
        });
    });
});

